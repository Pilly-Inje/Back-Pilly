name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PROJECT_NAME: pilly_project
  BUCKET_NAME: pilly-bucket
  CODE_DEPLOY_APP_NAME: pillyApp
  DEPLOYMENT_GROUP_NAME: graduationWork_deploy

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # deploy.sh 접근 권한 주기
    - name: Give execute permission to deploy.sh
      run: chmod +x ./scripts/deploy.sh
      shell: bash
      
    #gradle 의존성 캐시
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
   
    #created properties
    - uses: actions/checkout@v4
    - run: mkdir -p ./src/main/resources
    - run: touch ./src/main/resources/application.properties
    - run: echo "${{ secrets.APPLICATION }}" >> ./src/main/resources/application.properties
    - run: cat ./src/main/resources/application.properties

    - name: Create GCP Service Account JSON file
      run: echo "${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}" > ./src/main/resources/ocr-project.json
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash

    - name: Build with Gradle Wrapper
      run: ./gradlew build
      shell: bash
      
    - name: Upload Test Reports
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: build/reports/tests/test/index.html
    
    - name: Make Zip File
      run: zip -r ./$GITHUB_SHA.zip .
      shell: bash
        
    - name: List files in deployment package
      run: unzip -l ./$GITHUB_SHA.zip
      shell: bash
      
    - name: Check current directory
      run: pwd
    - name: List files in current directory
      run: ls -l

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip


    - name: Check if previous deployment is active
      id: check_deployment
      run: |
        DEPLOYMENT_ID=$(aws deploy list-deployments --application-name $CODE_DEPLOY_APP_NAME --deployment-group-name $DEPLOYMENT_GROUP_NAME --query 'deployments[0]' --output text)
        
         DEPLOYMENT_STATUS=$(aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --query 'deploymentInfo.status' --output text)
        if [ "$DEPLOYMENT_STATUS" != "Succeeded" ] && [ "$DEPLOYMENT_STATUS" != "Failed" ]; then
          echo "Previous deployment is still active. Exiting the deployment process."
          exit 1
        fi
      shell: bash

    - name: Create new deployment
      run: |
        # Create a new deployment and get the deployment ID
        DEPLOYMENT_ID=$(aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name $DEPLOYMENT_GROUP_NAME --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip --query 'deploymentId' --output text)
        echo "Deployment created with ID: $DEPLOYMENT_ID"
      if: steps.check_deployment.outcome == 'success'
  
    - name: Deploy to EC2
      env:
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        echo "$EC2_SSH_KEY" > ec2_key.pem
        chmod 600 ec2_key.pem
        scp -o StrictHostKeyChecking=no -i ec2_key.pem build/libs/pilly-0.0.1-SNAPSHOT.jar ec2-user@ec2-52-78-204-121.ap-northeast-2.compute.amazonaws.com
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@ec2-52-78-204-121.ap-northeast-2.compute.amazonaws.com << EOF
          sudo systemctl stop myapp.service
          sudo cp /home/ec2-user/pilly-0.0.1-SNAPSHOT.jar /opt/myapp/myapp.jar
          sudo systemctl start myapp.service
        EOF
