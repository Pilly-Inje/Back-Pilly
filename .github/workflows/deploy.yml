name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PROJECT_NAME: pilly_project
  BUCKET_NAME: pilly-bucket
  CODE_DEPLOY_APP_NAME: pillyApp
  DEPLOYMENT_GROUP_NAME: graduationWork_deploy

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Create application.properties and OCR credentials
      run: |
        mkdir -p ./src/main/resources
        echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
        echo "${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}" | base64 --decode > ./src/main/resources/ocr-project.json
        ls -lah ./src/main/resources
        cat ./src/main/resources/application.properties
        cat ./src/main/resources/ocr-project.json

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Upload Test Reports
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: build/reports/tests/test/index.html

    - name: Make Zip File
      run: zip -r ./$GITHUB_SHA.zip .

    - name: List files in deployment package
      run: unzip -l ./$GITHUB_SHA.zip

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Check if deployment is already in progress
      id: check_deploy
      run: |
        DEPLOY_ID=$(aws deploy list-deployments \
          --application-name $CODE_DEPLOY_APP_NAME \
          --deployment-group-name $DEPLOYMENT_GROUP_NAME \
          --include-only-statuses "InProgress" \
          --query "deployments[0]" --output text)
        echo "Deployment in progress: $DEPLOY_ID"
        if [ "$DEPLOY_ID" != "None" ]; then
          echo "A deployment is still in progress. Exiting..."
          exit 1
        fi

    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

    - name: Wait for previous deployment to complete (if needed)
      run: |
        while true; do
          status=$(aws deploy get-deployment-group \
            --application-name $CODE_DEPLOY_APP_NAME \
            --deployment-group-name $DEPLOYMENT_GROUP_NAME \
            --query 'deploymentGroupInfo.lastAttemptedDeployment.status' \
            --output text)
          echo "Last deployment status: $status"
          if [[ "$status" == "Succeeded" || "$status" == "Failed" || "$status" == "Stopped" || "$status" == "Unknown" ]]; then
            break
          fi
          echo "Waiting for previous deployment to finish..."
          sleep 10
        done

    - name: Code Deploy
      run: |
        aws deploy create-deployment \
          --application-name $CODE_DEPLOY_APP_NAME \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --deployment-group-name $DEPLOYMENT_GROUP_NAME \
          --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
